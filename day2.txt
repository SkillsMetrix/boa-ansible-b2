
from pydantic import BaseModel
# contains what you expect from the user
class Base(BaseModel):
    name: str
    sclass: str
    section: str
---------------

# schema reprenstation
from sqlalchemy import Column,Integer,String

from .database import Base

class Student(Base):
    __tablename__="STUDENT"

    name=Column(String,primary_key=True)
    sclass=Column(String)
    section=Column(String)

------------------------

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import sessionmaker

SQL_DB = "sqlite:///./mytest.db"

engine = create_engine(
    SQL_DB, connect_args={"check_same_thread": False}

)
SessioLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()


def get_connection():
    db = SessioLocal()
    try:
        yield db
    finally:
        db.close()

-------------



from fastapi import FastAPI, HTTPException, status, APIRouter,Depends
from fastapi.params import Body
from sqlalchemy.orm import Session
from random import randrange
from .. import schema,models
from .. database import engine,get_connection


router = APIRouter(tags=["USER APPLICATION"])




# insert new records


@router.post("/addpost", status_code=status.HTTP_201_CREATED)
def registerPost(student: schema.Base,db:Session=Depends(get_connection)):
    new_post=models.Base(**student.dict())
    db.add(new_post)
    db.commit()
    db.refresh(new_post)
    return {"data": new_post}


----------------



from fastapi import FastAPI
from . routers import post
from .database import engine,get_connection
from . import models,schema


models.Base.metadata.create_all(bind=engine)
app = FastAPI()


app.include_router(post.router)
